package main
import "testing"
import "fmt"

func TestClient(t *testing.T) {
  fmt.Println(stringToInt("165-13777"))
  cases := []struct {
    in, want string
  }{
    // {makeQuery(2, 191397, 20), "10"},
    // {makeQuery(3, 10, 20), "158743-158741-8 158745-158744-8 158745-158746-4 158746-158745-2 158746-158747-14 159049-159048-15 160050-160051-3 160051-160050-8 160050-160052-4 160052-160050-10 158746-160044-6 158745-160057-6 160059-160060-5 160060-160059-4 160060-160061-3 160061-160060-4 160062-160063-14 160063-160062-15 160063-160064-2 160064-160063-12 160064-160065-1 160065-160064-15 160065-160059-13 160059-160065-8 160066-160063-8 160063-160066-5 160067-159048-8 160066-160078-3 160064-160084-3 161124-161123-9 161124-161125-7 161125-161124-10 161124-161126-8 161134-161135-7 160065-161264-3 161264-160065-3 161264-160084-2 160059-161265-8 161265-160059-14 161264-161265-1 161265-161264-8 160060-161266-15 161266-160060-6 161265-161266-13 161266-161265-11 161266-161267-3 161267-161266-7 161267-161268-5 161268-161267-3 161268-160050-10 160050-161268-14 160060-160050-8 160050-160060-10 161269-161270-7 161270-161269-14 161267-172143-14 172143-161267-15 161268-172144-1 172144-161268-12 172755-172756-9 172756-172755-14 172763-161269-6 161269-172763-10 172764-172755-13 172755-172764-2 172756-172763-1 172763-172756-1 172764-161281-14 161270-161134-5 161134-161270-9 160067-160066-9 160066-160067-5 159049-160067-6 160067-159049-4"},
    {makeQuery(4, stringToInt("165-13777"), 20), "165,164,230,34,33,1730,1729,4888,4887,4890,4856,4857,40,41,4855,4847,4488,4510,4845,4667,4826,4824,4820,4817,4816,4815,4151,16,17,4446,4445,4444,4441,4440,4437,4425,4412,4436,259696,259692,259691,258332,258330,258314,258313,258312,244615,244579,244582,244581,244592,244589,244555,244551,244540,244538,244537,244524,244519,244509,244503,244504,244500,243791,243772,243768,243760,243758,243755,243655,243584,243585,243582,243583,243563,243559,243523,243524,261953,243507,243506,243462,243438,243436,243434,243427,243425,243423,243419,242794,242787,242788,263747,242765,242784,242785,242731,242730,242756,242761,242762,242755,242749,240136,240134,240125,240128,240127,240130,240129,240174,240175,240168,240166,240169,240194,240188,240065,240190,240193,240080,240056,240074,240031,240029,240030,240032,240036,240037,263715,240033,240020,240019,239208,233430,233429,233427,233428,234707,233270,233271,233447,233452,233453,233461,233463,233483,233470,233484,233487,233489,233497,233454,233507,233509,233510,233607,233608,233609,233576,233611,233624,233620,233621,233640,11165,11164,11194,11206,11213,14273,14276,14275,13608,13609,13607,13613,13614,13616,14023,14022,14019,14021,14020,14010,14017,14018,14062,14052,13907,13906,13902,13903,13897,13901,13818,13805,13804,13778,13777"},
  }
  for _, c := range cases {
    if c.in != c.want {
      t.Errorf("got %q, want %q", c.in, c.want)
    }
  }
}